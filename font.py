import collections

font = [0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c,
0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc,
0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc,
0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78,
0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e,
0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78,
0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78,
0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30,
0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78,
0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70,
0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc,
0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc,
0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c,
0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8,
0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe,
0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0,
0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e,
0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c,
0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00]

font = [0xB0, 0x11,
0xE6, 0x20,
0xE6, 0xA0,
0xB0, 0x00,
0xE6, 0x21,
0xB0, 0x07,
0xE6, 0xA1,
0xB0, 0x04,
0xE6, 0x21,
0xB0, 0x02,
0xE6, 0xA1,
0xB0, 0x01,
0xE6, 0x21,
0xE6, 0xA1,
0xB0, 0xFF,
0xE6, 0xA1]
font = list([ord(c) for c in open('test.bin').read()])
histogram = collections.defaultdict(lambda :0)
for value in font:
    histogram[value] = histogram[value] + 1

#print("original size", len(font))
#print(histogram)
#print(len(histogram.values()))
candidates = list(sorted([(v, k) for k,v in histogram.items()], reverse = True))
#print(candidates)

for bits in range(8): 
    gain = 0
    replaced_chars = 0
    for (freq, value) in candidates[:2**bits]:
        gain += freq*8 - freq*(bits+1)
        replaced_chars += freq
    gain = gain - (1077 - replaced_chars)
    print 'bits', bits, 'gain', gain, 'max code', round(1024 - (1077 - (gain/8.0)) - 2**bits)

values = list([v for _, v in candidates[:2**5]])
print "table: .byte %s" % ", ".join(['0x%02X' % v for v in values])

class BitWriter(object):
    def __init__(self):
        self.current_byte = 0
        self.index = 0
        self.values = []
    def flush(self):
        self.values.append(self.current_byte)
        self.current_byte = 0
        self.index = 0
    def write(self, b):
        self.current_byte |= b << self.index
        self.index += 1
        if self.index == 8:
            self.values.append(self.current_byte)
            self.current_byte = 0
            self.index = 0
    def write_bits(self, v, bits): # MSB first
        for bit in range(bits-1, -1, -1):
            self.write(1 if (v & (1 << bit)) != 0 else 0)

writer = BitWriter()
for v in font:
    try:
        codepoint = values.index(v)
    except ValueError:
        #print('literal', hex(v))
        writer.write(0)
        writer.write_bits(v, 8)
    else:
        #print('codepoint', hex(codepoint), 'value', hex(v))
        writer.write(1)
        writer.write_bits(codepoint, 5)
writer.flush()
print "packed_data: .byte %s" % ", ".join("0x%02X" % v for v in writer.values)
print "packed_data_end:"
print len(values)
print len(writer.values)

#keys = list(histogram.keys()) 
#print(", ".join([hex(v) for v in keys]))
#print(", ".join([hex(keys.index(v)) for v in font]))
